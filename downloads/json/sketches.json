[
  {
    "_id": "erZS4hcSn",
    "name": "Simulate: Koch copy",
    "files": [
      {
        "name": "root",
        "content": "",
        "children": [
          "67d2f113ff80aa68978dfa82",
          "67d2f113ff80aa68978dfa83",
          "67d2f113ff80aa68978dfa84"
        ],
        "fileType": "folder",
        "_id": "67d2f113ff80aa68978dfa81",
        "createdAt": "2024-06-03T01:05:14.470Z",
        "updatedAt": "2024-06-03T01:05:14.470Z",
        "id": "67d2f113ff80aa68978dfa81"
      },
      {
        "name": "sketch.js",
        "content": "/*\n * @name Koch Curve\n * @arialabel Koch snowflake is created by a single horizontal white line on a black background that then morphs into a triangle in the middle, and then each side of the triangle also becomes two more triangles, and this repeats 5 times\n * @description Renders a simple fractal, the Koch snowflake. Each recursive level is drawn in sequence.\n * By Daniel Shiffman\n */\n\nlet k;\n\nfunction setup() {\n  createCanvas(710, 400);\n  frameRate(1);  // Animate slowly\n  k = new KochFractal();\n}\n\nfunction draw() {\n  background(0);\n  // Draws the snowflake!\n  k.render();\n  // Iterate\n  k.nextLevel();\n  // Let's not do it more than 5 times. . .\n  if (k.getCount() > 5) {\n    k.restart();\n  }\n}\n\n// A class to describe one line segment in the fractal\n// Includes methods to calculate midp5.Vectors along the line according to the Koch algorithm\n\nclass KochLine {\n  constructor(a,b) {\n    // Two p5.Vectors,\n    // start is the \"left\" p5.Vector and\n    // end is the \"right p5.Vector\n    this.start = a.copy();\n    this.end = b.copy();\n  }\n\n  display() {\n    stroke(255);\n    line(this.start.x, this.start.y, this.end.x, this.end.y);\n  }\n\n  kochA() {\n    return this.start.copy();\n  }\n\n  // This is easy, just 1/3 of the way\n  kochB() {\n    let v = p5.Vector.sub(this.end, this.start);\n    v.div(3);\n    v.add(this.start);\n    return v;\n  }\n\n  // More complicated, have to use a little trig to figure out where this p5.Vector is!\n  kochC() {\n    let a = this.start.copy(); // Start at the beginning\n    let v = p5.Vector.sub(this.end, this.start);\n    v.div(3);\n    a.add(v);  // Move to point B\n    v.rotate(-PI/3); // Rotate 60 degrees\n    a.add(v);  // Move to point C\n    return a;\n  }\n\n  // Easy, just 2/3 of the way\n  kochD() {\n    let v = p5.Vector.sub(this.end, this.start);\n    v.mult(2/3.0);\n    v.add(this.start);\n    return v;\n  }\n\n  kochE() {\n    return this.end.copy();\n  }\n}\n\n// A class to manage the list of line segments in the snowflake pattern\n\nclass KochFractal {\n  constructor() {\n    this.start = createVector(0,height-20);   // A p5.Vector for the start\n    this.end = createVector(width,height-20); // A p5.Vector for the end\n    this.lines = [];                         // An array to keep track of all the lines\n    this.count = 0;\n    this.restart();\n  }\n\n  nextLevel() {\n    // For every line that is in the arraylist\n    // create 4 more lines in a new arraylist\n    this.lines = this.iterate(this.lines);\n    this.count++;\n  }\n\n  restart() {\n    this.count = 0;      // Reset count\n    this.lines = [];  // Empty the array list\n    this.lines.push(new KochLine(this.start,this.end));  // Add the initial line (from one end p5.Vector to the other)\n  }\n\n  getCount() {\n    return this.count;\n  }\n\n  // This is easy, just draw all the lines\n  render() {\n    for(let i = 0; i < this.lines.length; i++) {\n      this.lines[i].display();\n    }\n  }\n\n  // This is where the **MAGIC** happens\n  // Step 1: Create an empty arraylist\n  // Step 2: For every line currently in the arraylist\n  //   - calculate 4 line segments based on Koch algorithm\n  //   - add all 4 line segments into the new arraylist\n  // Step 3: Return the new arraylist and it becomes the list of line segments for the structure\n\n  // As we do this over and over again, each line gets broken into 4 lines, which gets broken into 4 lines, and so on. . .\n  iterate(before) {\n    let now = [];    // Create emtpy list\n    for(let i = 0; i < this.lines.length; i++) {\n      let l = this.lines[i];\n      // Calculate 5 koch p5.Vectors (done for us by the line object)\n      let a = l.kochA();\n      let b = l.kochB();\n      let c = l.kochC();\n      let d = l.kochD();\n      let e = l.kochE();\n      // Make line segments between all the p5.Vectors and add them\n      now.push(new KochLine(a,b));\n      now.push(new KochLine(b,c));\n      now.push(new KochLine(c,d));\n      now.push(new KochLine(d,e));\n    }\n    return now;\n  }\n}\n",
        "children": [],
        "fileType": "file",
        "isSelectedFile": true,
        "_id": "67d2f113ff80aa68978dfa83",
        "createdAt": "2024-06-03T01:05:14.470Z",
        "updatedAt": "2024-06-03T01:05:14.470Z",
        "id": "67d2f113ff80aa68978dfa83"
      },
      {
        "name": "index.html",
        "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.4/p5.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.4/addons/p5.sound.min.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n    <meta charset=\"utf-8\" />\n\n  </head>\n  <body>\n    <main>\n    </main>\n    <script src=\"sketch.js\"></script>\n  </body>\n</html>\n",
        "children": [],
        "fileType": "file",
        "_id": "67d2f113ff80aa68978dfa82",
        "createdAt": "2024-06-03T01:05:14.470Z",
        "updatedAt": "2024-06-03T01:05:14.470Z",
        "id": "67d2f113ff80aa68978dfa82"
      },
      {
        "name": "style.css",
        "content": "html, body {\n  margin: 0;\n  padding: 0;\n}\ncanvas {\n  display: block;\n}\n",
        "children": [],
        "fileType": "file",
        "_id": "67d2f113ff80aa68978dfa84",
        "createdAt": "2024-06-03T01:05:14.470Z",
        "updatedAt": "2024-06-03T01:05:14.470Z",
        "id": "67d2f113ff80aa68978dfa84"
      }
    ],
    "createdAt": "2025-03-13T14:52:03.670Z",
    "updatedAt": "2025-03-13T14:52:03.670Z",
    "id": "erZS4hcSn"
  },
  {
    "_id": "e-bmM-91r",
    "name": "Simulate: Koch copy copy",
    "files": [
      {
        "name": "root",
        "content": "",
        "children": [
          "67d2f11bff80aa68978dfa86",
          "67d2f11bff80aa68978dfa87",
          "67d2f11bff80aa68978dfa88"
        ],
        "fileType": "folder",
        "_id": "67d2f11bff80aa68978dfa85",
        "createdAt": "2025-03-13T15:09:25.114Z",
        "updatedAt": "2025-03-13T15:09:25.114Z",
        "id": "67d2f11bff80aa68978dfa85"
      },
      {
        "name": "sketch.js",
        "content": "/*\n * @name Koch Curve\n * @arialabel Koch snowflake is created by a single horizontal white line on a black background that then morphs into a triangle in the middle, and then each side of the triangle also becomes two more triangles, and this repeats 5 times\n * @description Renders a simple fractal, the Koch snowflake. Each recursive level is drawn in sequence.\n * By Daniel Shiffman\n */\n\nlet k;\n\nfunction setup() {\n  createCanvas(710, 400);\n  frameRate(1);  // Animate slowly\n  k = new KochFractal();\n}\n\nfunction draw() {\n  background(0);\n  // Draws the snowflake!\n  k.render();\n  // Iterate\n  k.nextLevel();\n  // Let's not do it more than 5 times. . .\n  if (k.getCount() > 5) {\n    k.restart();\n  }\n}\n\n// A class to describe one line segment in the fractal\n// Includes methods to calculate midp5.Vectors along the line according to the Koch algorithm\n\nclass KochLine {\n  constructor(a,b) {\n    // Two p5.Vectors,\n    // start is the \"left\" p5.Vector and\n    // end is the \"right p5.Vector\n    this.start = a.copy();\n    this.end = b.copy();\n  }\n\n  display() {\n    stroke(255);\n    line(this.start.x, this.start.y, this.end.x, this.end.y);\n  }\n\n  kochA() {\n    return this.start.copy();\n  }\n\n  // This is easy, just 1/3 of the way\n  kochB() {\n    let v = p5.Vector.sub(this.end, this.start);\n    v.div(3);\n    v.add(this.start);\n    return v;\n  }\n\n  // More complicated, have to use a little trig to figure out where this p5.Vector is!\n  kochC() {\n    let a = this.start.copy(); // Start at the beginning\n    let v = p5.Vector.sub(this.end, this.start);\n    v.div(3);\n    a.add(v);  // Move to point B\n    v.rotate(-PI/3); // Rotate 60 degrees\n    a.add(v);  // Move to point C\n    return a;\n  }\n\n  // Easy, just 2/3 of the way\n  kochD() {\n    let v = p5.Vector.sub(this.end, this.start);\n    v.mult(2/3.0);\n    v.add(this.start);\n    return v;\n  }\n\n  kochE() {\n    return this.end.copy();\n  }\n}\n\n// A class to manage the list of line segments in the snowflake pattern\n\nclass KochFractal {\n  constructor() {\n    this.start = createVector(0,height-20);   // A p5.Vector for the start\n    this.end = createVector(width,height-20); // A p5.Vector for the end\n    this.lines = [];                         // An array to keep track of all the lines\n    this.count = 0;\n    this.restart();\n  }\n\n  nextLevel() {\n    // For every line that is in the arraylist\n    // create 4 more lines in a new arraylist\n    this.lines = this.iterate(this.lines);\n    this.count++;\n  }\n\n  restart() {\n    this.count = 0;      // Reset count\n    this.lines = [];  // Empty the array list\n    this.lines.push(new KochLine(this.start,this.end));  // Add the initial line (from one end p5.Vector to the other)\n  }\n\n  getCount() {\n    return this.count;\n  }\n\n  // This is easy, just draw all the lines\n  render() {\n    for(let i = 0; i < this.lines.length; i++) {\n      this.lines[i].display();\n    }\n  }\n\n  // This is where the **MAGIC** happens\n  // Step 1: Create an empty arraylist\n  // Step 2: For every line currently in the arraylist\n  //   - calculate 4 line segments based on Koch algorithm\n  //   - add all 4 line segments into the new arraylist\n  // Step 3: Return the new arraylist and it becomes the list of line segments for the structure\n\n  // As we do this over and over again, each line gets broken into 4 lines, which gets broken into 4 lines, and so on. . .\n  iterate(before) {\n    let now = [];    // Create emtpy list\n    for(let i = 0; i < this.lines.length; i++) {\n      let l = this.lines[i];\n      // Calculate 5 koch p5.Vectors (done for us by the line object)\n      let a = l.kochA();\n      let b = l.kochB();\n      let c = l.kochC();\n      let d = l.kochD();\n      let e = l.kochE();\n      // Make line segments between all the p5.Vectors and add them\n      now.push(new KochLine(a,b));\n      now.push(new KochLine(b,c));\n      now.push(new KochLine(c,d));\n      now.push(new KochLine(d,e));\n    }\n    return now;\n  }\n}\n",
        "children": [],
        "fileType": "file",
        "isSelectedFile": true,
        "_id": "67d2f11bff80aa68978dfa87",
        "createdAt": "2025-03-13T15:09:25.114Z",
        "updatedAt": "2025-03-13T15:09:25.114Z",
        "id": "67d2f11bff80aa68978dfa87"
      },
      {
        "name": "index.html",
        "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.4/p5.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.4/addons/p5.sound.min.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n    <meta charset=\"utf-8\" />\n\n  </head>\n  <body>\n    <main>\n    </main>\n    <script src=\"sketch.js\"></script>\n  </body>\n</html>\n",
        "children": [],
        "fileType": "file",
        "_id": "67d2f11bff80aa68978dfa86",
        "createdAt": "2025-03-13T15:09:25.114Z",
        "updatedAt": "2025-03-13T15:09:25.114Z",
        "id": "67d2f11bff80aa68978dfa86"
      },
      {
        "name": "style.css",
        "content": "html, body {\n  margin: 0;\n  padding: 0;\n}\ncanvas {\n  display: block;\n}\n",
        "children": [],
        "fileType": "file",
        "_id": "67d2f11bff80aa68978dfa88",
        "createdAt": "2025-03-13T15:09:25.114Z",
        "updatedAt": "2025-03-13T15:09:25.114Z",
        "id": "67d2f11bff80aa68978dfa88"
      }
    ],
    "createdAt": "2025-03-13T14:52:11.373Z",
    "updatedAt": "2025-03-13T15:09:25.114Z",
    "id": "e-bmM-91r"
  }
]
